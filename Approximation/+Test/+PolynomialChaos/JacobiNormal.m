clear all;
setup;

samples = 1e4;

%% Choose a distribution.
%
normal = ProbabilityDistribution.Normal( ...
  'mu', 0, 'sigma', 1);
beta = ProbabilityDistribution.Beta( ...
  'alpha', 2, 'beta', 2, 'a', -1, 'b', 1);

%% Construct the PC expansion.
%
chaos = PolynomialChaos.Jacobi( ...
  @(x) normal.invert(beta.apply(x)), ...
  'inputCount', 1, ...
  'outputCount', 1, ...
  'order', 10, ...
  'alpha', beta.alpha - 1, ...
  'beta', beta.beta - 1, ...
  'a', beta.a, ...
  'b', beta.b, ...
  'quadratureOptions', Options( ...
    'method', 'tensor', ...
    'order', 10));

display(chaos);

apData = chaos.evaluate(beta.sample(samples, 1));

%% Compare.
%
mcData = normal.sample(samples, 1);

fprintf('Error of expectation: %.6f\n', ...
  abs(normal.expectation - chaos.expectation));
fprintf('Error of variance:    %.6f\n', ...
  abs(normal.variance - chaos.variance));

compareData(mcData, apData, ...
  'draw', true, 'method', 'histogram', 'range', 'unbounded', ...
  'labels', {{ 'Monte Carlo', 'Polynomial chaos' }});
